{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "295f70da-87eb-4b26-b6ab-b8ee05dfbb12",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: selenium in c:\\users\\haril\\anaconda3\\lib\\site-packages (4.28.1)\n",
      "Requirement already satisfied: urllib3<3,>=1.26 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from urllib3[socks]<3,>=1.26->selenium) (2.0.7)\n",
      "Requirement already satisfied: trio~=0.17 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from selenium) (0.28.0)\n",
      "Requirement already satisfied: trio-websocket~=0.9 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from selenium) (0.11.1)\n",
      "Requirement already satisfied: certifi>=2021.10.8 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from selenium) (2024.2.2)\n",
      "Requirement already satisfied: typing_extensions~=4.9 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from selenium) (4.9.0)\n",
      "Requirement already satisfied: websocket-client~=1.8 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from selenium) (1.8.0)\n",
      "Requirement already satisfied: attrs>=23.2.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from trio~=0.17->selenium) (25.1.0)\n",
      "Requirement already satisfied: sortedcontainers in c:\\users\\haril\\anaconda3\\lib\\site-packages (from trio~=0.17->selenium) (2.4.0)\n",
      "Requirement already satisfied: idna in c:\\users\\haril\\anaconda3\\lib\\site-packages (from trio~=0.17->selenium) (3.4)\n",
      "Requirement already satisfied: outcome in c:\\users\\haril\\anaconda3\\lib\\site-packages (from trio~=0.17->selenium) (1.3.0.post0)\n",
      "Requirement already satisfied: sniffio>=1.3.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from trio~=0.17->selenium) (1.3.0)\n",
      "Requirement already satisfied: cffi>=1.14 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from trio~=0.17->selenium) (1.16.0)\n",
      "Requirement already satisfied: wsproto>=0.14 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from trio-websocket~=0.9->selenium) (1.2.0)\n",
      "Requirement already satisfied: pysocks!=1.5.7,<2.0,>=1.5.6 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from urllib3[socks]<3,>=1.26->selenium) (1.7.1)\n",
      "Requirement already satisfied: pycparser in c:\\users\\haril\\anaconda3\\lib\\site-packages (from cffi>=1.14->trio~=0.17->selenium) (2.21)\n",
      "Requirement already satisfied: h11<1,>=0.9.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from wsproto>=0.14->trio-websocket~=0.9->selenium) (0.14.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install selenium"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6a75d9f0-6529-4c1b-b398-f222a1b09f77",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pandas in c:\\users\\haril\\anaconda3\\lib\\site-packages (2.1.4)\n",
      "Requirement already satisfied: numpy<2,>=1.23.2 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from pandas) (1.26.4)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from pandas) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from pandas) (2023.3.post1)\n",
      "Requirement already satisfied: tzdata>=2022.1 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from pandas) (2023.3)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 333,
   "id": "83a5dc6b-773b-454e-bec0-a2ef9c1f1610",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Clicked Load More Button\n",
      "Clicked Load More Button\n",
      "Clicked Load More Button\n",
      "Clicked Load More Button\n",
      "Clicked Load More Button\n",
      "Clicked Load More Button\n",
      "Clicked Load More Button\n",
      "Clicked Load More Button\n",
      "Clicked Load More Button\n",
      "Clicked Load More Button\n",
      "Clicked Load More Button\n",
      "Error Clicking Load More Button : Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id=\"__next\"]/main/div[2]/div[3]/section/section/div/section/section/div[2]/div/section/div[2]/div[2]/div[2]/div/span/button\"}\n",
      "  (Session info: chrome=133.0.6943.98); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\n",
      "Stacktrace:\n",
      "\tGetHandleVerifier [0x00007FF6279B6EE5+28773]\n",
      "\t(No symbol) [0x00007FF6279225D0]\n",
      "\t(No symbol) [0x00007FF6277B8FAA]\n",
      "\t(No symbol) [0x00007FF62780F286]\n",
      "\t(No symbol) [0x00007FF62780F4BC]\n",
      "\t(No symbol) [0x00007FF627862A27]\n",
      "\t(No symbol) [0x00007FF62783728F]\n",
      "\t(No symbol) [0x00007FF62785F6F3]\n",
      "\t(No symbol) [0x00007FF627837023]\n",
      "\t(No symbol) [0x00007FF6277FFF5E]\n",
      "\t(No symbol) [0x00007FF6278011E3]\n",
      "\tGetHandleVerifier [0x00007FF627D0422D+3490733]\n",
      "\tGetHandleVerifier [0x00007FF627D1BA13+3586963]\n",
      "\tGetHandleVerifier [0x00007FF627D1144D+3544525]\n",
      "\tGetHandleVerifier [0x00007FF627A7C9AA+838442]\n",
      "\t(No symbol) [0x00007FF62792D01F]\n",
      "\t(No symbol) [0x00007FF6279295E4]\n",
      "\t(No symbol) [0x00007FF627929786]\n",
      "\t(No symbol) [0x00007FF627918CB9]\n",
      "\tBaseThreadInitThunk [0x00007FF95AB8259D+29]\n",
      "\tRtlUserThreadStart [0x00007FF95BF6AF38+40]\n",
      "\n",
      "No more content to load\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n",
      "Error Extractig data for the movie :\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Voting</th>\n",
       "      <th>Duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1. Gladiator II</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>6.6</td>\n",
       "      <td>(201K)</td>\n",
       "      <td>2h 28m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2. Sonic the Hedgehog 3</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>7.0</td>\n",
       "      <td>(45K)</td>\n",
       "      <td>1h 50m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3. Flow</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>7.9</td>\n",
       "      <td>(36K)</td>\n",
       "      <td>1h 25m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4. Moana 2</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>6.8</td>\n",
       "      <td>(78K)</td>\n",
       "      <td>1h 40m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5. Mufasa: The Lion King</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>6.7</td>\n",
       "      <td>(39K)</td>\n",
       "      <td>1h 58m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>361</th>\n",
       "      <td>529. Selebryata</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>3.6</td>\n",
       "      <td>(19)</td>\n",
       "      <td>1h 33m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>362</th>\n",
       "      <td>535. Lajjpal</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>9.0</td>\n",
       "      <td>(8)</td>\n",
       "      <td>4h 12m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>363</th>\n",
       "      <td>539. Sehnsucht nach Firdaws</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>8.5</td>\n",
       "      <td>(6)</td>\n",
       "      <td>1h 43m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>364</th>\n",
       "      <td>580. Beyaz Zenciler: Yapim Asamasi</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>8.6</td>\n",
       "      <td>(5)</td>\n",
       "      <td>55m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>365</th>\n",
       "      <td>586. Rocky and Bullwinkle</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>10</td>\n",
       "      <td>(8)</td>\n",
       "      <td>1h 40m</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>366 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  Title      Genre Rating   Voting Duration\n",
       "0                       1. Gladiator II  Adventure    6.6   (201K)   2h 28m\n",
       "1               2. Sonic the Hedgehog 3  Adventure    7.0    (45K)   1h 50m\n",
       "2                               3. Flow  Adventure    7.9    (36K)   1h 25m\n",
       "3                            4. Moana 2  Adventure    6.8    (78K)   1h 40m\n",
       "4              5. Mufasa: The Lion King  Adventure    6.7    (39K)   1h 58m\n",
       "..                                  ...        ...    ...      ...      ...\n",
       "361                     529. Selebryata  Adventure    3.6     (19)   1h 33m\n",
       "362                        535. Lajjpal  Adventure    9.0      (8)   4h 12m\n",
       "363         539. Sehnsucht nach Firdaws  Adventure    8.5      (6)   1h 43m\n",
       "364  580. Beyaz Zenciler: Yapim Asamasi  Adventure    8.6      (5)      55m\n",
       "365           586. Rocky and Bullwinkle  Adventure     10      (8)   1h 40m\n",
       "\n",
       "[366 rows x 5 columns]"
      ]
     },
     "execution_count": 333,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import time\n",
    "import pandas as pd\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.common.by import By\n",
    "from selenium.webdriver.common.action_chains import ActionChains\n",
    "from selenium.webdriver.common.keys import Keys\n",
    "\n",
    "driver = webdriver.Chrome()\n",
    "\n",
    "driver.get(\"https://www.imdb.com/search/title/?title_type=feature&release_date=2024-01-01,2024-12-31&genres=adventure\")\n",
    "\n",
    "time.sleep(1)\n",
    "\n",
    "def click_load_more():\n",
    "    try:\n",
    "        load_more_button = driver.find_element(By.XPATH,'//*[@id=\"__next\"]/main/div[2]/div[3]/section/section/div/section/section/div[2]/div/section/div[2]/div[2]/div[2]/div/span/button')\n",
    "        ActionChains(driver).move_to_element(load_more_button).perform()\n",
    "        load_more_button.click()\n",
    "        time.sleep(5)\n",
    "        return True\n",
    "    except Exception as e:\n",
    "        print (\"Error Clicking Load More Button :\",e)\n",
    "        return False\n",
    "\n",
    "while click_load_more():\n",
    "    print(\"Clicked Load More Button\")\n",
    "\n",
    "print(\"No more content to load\")\n",
    "\n",
    "time.sleep(1)\n",
    "\n",
    "titles = []\n",
    "genres = []\n",
    "ratings = []\n",
    "votings = []\n",
    "durations = []\n",
    "\n",
    "movie_items = driver.find_elements(By.XPATH,'//*[@id=\"__next\"]/main/div[2]/div[3]/section/section/div/section/section/div[2]/div/section/div[2]/div[2]/ul/li')\n",
    "\n",
    "for movie_item in movie_items:\n",
    "    try:\n",
    "        title = movie_item.find_element(By.XPATH,'./div/div/div/div[1]/div[2]/div[1]/a/h3').text\n",
    "        genre = movie_item.find_element(By.XPATH,'//*[@id=\"__next\"]/main/div[2]/div[3]/section/section/div/section/section/div[2]/div/section/div[1]/div/div/div[2]/button[3]').text\n",
    "        rating = movie_item.find_element(By.XPATH,'./div/div/div/div[1]/div[2]/span/div/span/span[1]').text\n",
    "        voting = movie_item.find_element(By.XPATH,'./div/div/div/div[1]/div[2]/span/div/span/span[2]').text\n",
    "        duration = movie_item.find_element(By.XPATH,'./div/div/div/div[1]/div[2]/div[2]/span[2]').text\n",
    "\n",
    "        titles.append(title)\n",
    "        genres.append(genre)\n",
    "        ratings.append(rating)\n",
    "        votings.append(voting)\n",
    "        durations.append(duration)\n",
    "\n",
    "    except Exception as e:\n",
    "        print(\"Error Extractig data for the movie :\")\n",
    "        continue\n",
    "\n",
    "dfadven = pd.DataFrame({\n",
    "    'Title' : titles,\n",
    "    'Genre' : genres,\n",
    "    'Rating' : ratings,\n",
    "    'Voting' : votings,\n",
    "    'Duration' : durations\n",
    "})\n",
    "\n",
    "driver.quit()\n",
    "dfadven"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "id": "4d6dc06b-41c0-42fa-a2b8-788afcc64069",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Voting</th>\n",
       "      <th>Duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1. Gladiator II</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>6.6</td>\n",
       "      <td>(201K)</td>\n",
       "      <td>2h 28m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2. Sonic the Hedgehog 3</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>7.0</td>\n",
       "      <td>(45K)</td>\n",
       "      <td>1h 50m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3. Flow</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>7.9</td>\n",
       "      <td>(36K)</td>\n",
       "      <td>1h 25m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4. Moana 2</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>6.8</td>\n",
       "      <td>(78K)</td>\n",
       "      <td>1h 40m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5. Mufasa: The Lion King</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>6.7</td>\n",
       "      <td>(39K)</td>\n",
       "      <td>1h 58m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>361</th>\n",
       "      <td>529. Selebryata</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>3.6</td>\n",
       "      <td>(19)</td>\n",
       "      <td>1h 33m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>362</th>\n",
       "      <td>535. Lajjpal</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>9.0</td>\n",
       "      <td>(8)</td>\n",
       "      <td>4h 12m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>363</th>\n",
       "      <td>539. Sehnsucht nach Firdaws</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>8.5</td>\n",
       "      <td>(6)</td>\n",
       "      <td>1h 43m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>364</th>\n",
       "      <td>580. Beyaz Zenciler: Yapim Asamasi</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>8.6</td>\n",
       "      <td>(5)</td>\n",
       "      <td>55m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>365</th>\n",
       "      <td>586. Rocky and Bullwinkle</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>10</td>\n",
       "      <td>(8)</td>\n",
       "      <td>1h 40m</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>366 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  Title      Genre Rating   Voting Duration\n",
       "0                       1. Gladiator II  Adventure    6.6   (201K)   2h 28m\n",
       "1               2. Sonic the Hedgehog 3  Adventure    7.0    (45K)   1h 50m\n",
       "2                               3. Flow  Adventure    7.9    (36K)   1h 25m\n",
       "3                            4. Moana 2  Adventure    6.8    (78K)   1h 40m\n",
       "4              5. Mufasa: The Lion King  Adventure    6.7    (39K)   1h 58m\n",
       "..                                  ...        ...    ...      ...      ...\n",
       "361                     529. Selebryata  Adventure    3.6     (19)   1h 33m\n",
       "362                        535. Lajjpal  Adventure    9.0      (8)   4h 12m\n",
       "363         539. Sehnsucht nach Firdaws  Adventure    8.5      (6)   1h 43m\n",
       "364  580. Beyaz Zenciler: Yapim Asamasi  Adventure    8.6      (5)      55m\n",
       "365           586. Rocky and Bullwinkle  Adventure     10      (8)   1h 40m\n",
       "\n",
       "[366 rows x 5 columns]"
      ]
     },
     "execution_count": 334,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfadven"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 335,
   "id": "385f4fb9-6ef5-4118-adce-de2ff7082abc",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfadven['Title'] = dfadven['Title'].apply(lambda x: ''.join([char for char in x if char not in '0123456789.']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 336,
   "id": "0f99e205-c462-47f5-b87c-cc85a45e0c01",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfadven ['Voting']=dfadven ['Voting'].apply(lambda x: x.replace('(',''))\n",
    "dfadven ['Voting']=dfadven ['Voting'].apply(lambda x: x.replace(')',''))\n",
    "dfadven ['Voting']=dfadven ['Voting'].apply(lambda x: int(float(x[:-1]) * 1000) if x[-1] == 'K' else int(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 337,
   "id": "d00b875b-5081-4b08-b395-d5c084fa436c",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfadven['Rating'] = dfadven['Rating'].apply(lambda x: float(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 338,
   "id": "8844e42a-22f4-442f-879e-89c248893c47",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfadven['Duration'] = dfadven['Duration'].apply(lambda time_str: \n",
    "    \n",
    "    (int(time_str.split('h')[0].strip()) * 60 + int(time_str.split('h')[1].split('m')[0].strip())) \n",
    "    if isinstance(time_str, str) and 'h' in time_str and 'm' in time_str else \n",
    "    \n",
    "    (int(time_str.replace('m', '').strip()) if isinstance(time_str, str) and 'm' in time_str else \n",
    "    \n",
    "    (int(time_str.replace('h', '').strip()) * 60 if isinstance(time_str, str) and 'h' in time_str else     \n",
    "   \n",
    "    time_str)\n",
    "    ))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "id": "b1c5862d-1834-4764-afd3-748486bd13cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Voting</th>\n",
       "      <th>Duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Gladiator II</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>6.6</td>\n",
       "      <td>201000</td>\n",
       "      <td>148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Sonic the Hedgehog</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>7.0</td>\n",
       "      <td>45000</td>\n",
       "      <td>110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Flow</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>7.9</td>\n",
       "      <td>36000</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Moana</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>6.8</td>\n",
       "      <td>78000</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Mufasa: The Lion King</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>6.7</td>\n",
       "      <td>39000</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>361</th>\n",
       "      <td>Selebryata</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>3.6</td>\n",
       "      <td>19</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>362</th>\n",
       "      <td>Lajjpal</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>9.0</td>\n",
       "      <td>8</td>\n",
       "      <td>252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>363</th>\n",
       "      <td>Sehnsucht nach Firdaws</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>8.5</td>\n",
       "      <td>6</td>\n",
       "      <td>103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>364</th>\n",
       "      <td>Beyaz Zenciler: Yapim Asamasi</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>8.6</td>\n",
       "      <td>5</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>365</th>\n",
       "      <td>Rocky and Bullwinkle</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>366 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              Title      Genre  Rating  Voting Duration\n",
       "0                      Gladiator II  Adventure     6.6  201000      148\n",
       "1               Sonic the Hedgehog   Adventure     7.0   45000      110\n",
       "2                              Flow  Adventure     7.9   36000       85\n",
       "3                            Moana   Adventure     6.8   78000      100\n",
       "4             Mufasa: The Lion King  Adventure     6.7   39000      118\n",
       "..                              ...        ...     ...     ...      ...\n",
       "361                      Selebryata  Adventure     3.6      19       93\n",
       "362                         Lajjpal  Adventure     9.0       8      252\n",
       "363          Sehnsucht nach Firdaws  Adventure     8.5       6      103\n",
       "364   Beyaz Zenciler: Yapim Asamasi  Adventure     8.6       5       55\n",
       "365            Rocky and Bullwinkle  Adventure    10.0       8      100\n",
       "\n",
       "[366 rows x 5 columns]"
      ]
     },
     "execution_count": 339,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfadven"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 340,
   "id": "c0f2dccc-c33b-42dd-b994-f5f6d5042847",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfadven.to_csv('dataadven.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 343,
   "id": "0a386732-4d99-44c7-b080-784d9dfa5a89",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pandas import Series, DataFrame\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import glob\n",
    "glob.glob('data*.csv')\n",
    "\n",
    "master_df = pd.concat([pd.read_csv(single_df)\n",
    "                   for single_df in glob.glob('data*.csv')])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 344,
   "id": "b7d50c8f-f607-4250-958f-8b366cbf4b3b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Title</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Voting</th>\n",
       "      <th>Duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Gladiator II</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>6.6</td>\n",
       "      <td>201000</td>\n",
       "      <td>148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Sonic the Hedgehog</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>7.0</td>\n",
       "      <td>45000</td>\n",
       "      <td>110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Flow</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>7.9</td>\n",
       "      <td>36000</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Moana</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>6.8</td>\n",
       "      <td>78000</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Mufasa: The Lion King</td>\n",
       "      <td>Adventure</td>\n",
       "      <td>6.7</td>\n",
       "      <td>39000</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>194</td>\n",
       "      <td>Stop, noch</td>\n",
       "      <td>Music</td>\n",
       "      <td>3.9</td>\n",
       "      <td>7</td>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>195</td>\n",
       "      <td>En kväll för LeMarc</td>\n",
       "      <td>Music</td>\n",
       "      <td>7.2</td>\n",
       "      <td>5</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>196</td>\n",
       "      <td>Böhse Onkelz:  Jahre Onkelz - Live im Waldsta...</td>\n",
       "      <td>Music</td>\n",
       "      <td>8.7</td>\n",
       "      <td>9</td>\n",
       "      <td>185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>197</td>\n",
       "      <td>Natanael Cano: Tumbado Tour</td>\n",
       "      <td>Music</td>\n",
       "      <td>2.3</td>\n",
       "      <td>7</td>\n",
       "      <td>197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>198</th>\n",
       "      <td>198</td>\n",
       "      <td>Paranoid:  let</td>\n",
       "      <td>Music</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1198 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0                                              Title      Genre  \\\n",
       "0             0                                       Gladiator II  Adventure   \n",
       "1             1                                Sonic the Hedgehog   Adventure   \n",
       "2             2                                               Flow  Adventure   \n",
       "3             3                                             Moana   Adventure   \n",
       "4             4                              Mufasa: The Lion King  Adventure   \n",
       "..          ...                                                ...        ...   \n",
       "194         194                                         Stop, noch      Music   \n",
       "195         195                                En kväll för LeMarc      Music   \n",
       "196         196   Böhse Onkelz:  Jahre Onkelz - Live im Waldsta...      Music   \n",
       "197         197                       Natanael Cano: Tumbado Tour       Music   \n",
       "198         198                                     Paranoid:  let      Music   \n",
       "\n",
       "     Rating  Voting Duration  \n",
       "0       6.6  201000      148  \n",
       "1       7.0   45000      110  \n",
       "2       7.9   36000       85  \n",
       "3       6.8   78000      100  \n",
       "4       6.7   39000      118  \n",
       "..      ...     ...      ...  \n",
       "194     3.9       7       97  \n",
       "195     7.2       5       88  \n",
       "196     8.7       9      185  \n",
       "197     2.3       7      197  \n",
       "198     6.0       6       51  \n",
       "\n",
       "[1198 rows x 6 columns]"
      ]
     },
     "execution_count": 344,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "master_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 345,
   "id": "514080f5-4a5b-4518-9fac-9a43c0fa28d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "master_df.to_csv('master_df.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 346,
   "id": "e286bc33-25c7-4619-8348-7078fb7961f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: streamlit in c:\\users\\haril\\anaconda3\\lib\\site-packages (1.30.0)Note: you may need to restart the kernel to use updated packages.\n",
      "\n",
      "Requirement already satisfied: altair<6,>=4.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (5.0.1)\n",
      "Requirement already satisfied: blinker<2,>=1.0.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (1.6.2)\n",
      "Requirement already satisfied: cachetools<6,>=4.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (4.2.2)\n",
      "Requirement already satisfied: click<9,>=7.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (8.1.7)\n",
      "Requirement already satisfied: importlib-metadata<8,>=1.4 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (7.0.1)\n",
      "Requirement already satisfied: numpy<2,>=1.19.3 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (1.26.4)\n",
      "Requirement already satisfied: packaging<24,>=16.8 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (23.1)\n",
      "Requirement already satisfied: pandas<3,>=1.3.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (2.1.4)\n",
      "Requirement already satisfied: pillow<11,>=7.1.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (10.2.0)\n",
      "Requirement already satisfied: protobuf<5,>=3.20 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (3.20.3)\n",
      "Requirement already satisfied: pyarrow>=6.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (14.0.2)\n",
      "Requirement already satisfied: python-dateutil<3,>=2.7.3 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (2.8.2)\n",
      "Requirement already satisfied: requests<3,>=2.27 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (2.31.0)\n",
      "Requirement already satisfied: rich<14,>=10.14.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (13.3.5)\n",
      "Requirement already satisfied: tenacity<9,>=8.1.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (8.2.2)\n",
      "Requirement already satisfied: toml<2,>=0.10.1 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (0.10.2)\n",
      "Requirement already satisfied: typing-extensions<5,>=4.3.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (4.9.0)\n",
      "Requirement already satisfied: tzlocal<6,>=1.1 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (2.1)\n",
      "Requirement already satisfied: validators<1,>=0.2 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (0.18.2)\n",
      "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (3.1.37)\n",
      "Requirement already satisfied: pydeck<1,>=0.8.0b4 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (0.8.0)\n",
      "Requirement already satisfied: tornado<7,>=6.0.3 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (6.3.3)\n",
      "Requirement already satisfied: watchdog>=2.1.5 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from streamlit) (2.1.6)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (3.1.3)\n",
      "Requirement already satisfied: jsonschema>=3.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (4.19.2)\n",
      "Requirement already satisfied: toolz in c:\\users\\haril\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (0.12.0)\n",
      "Requirement already satisfied: colorama in c:\\users\\haril\\anaconda3\\lib\\site-packages (from click<9,>=7.0->streamlit) (0.4.6)\n",
      "Requirement already satisfied: gitdb<5,>=4.0.1 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.7)\n",
      "Requirement already satisfied: zipp>=0.5 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from importlib-metadata<8,>=1.4->streamlit) (3.17.0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from pandas<3,>=1.3.0->streamlit) (2023.3.post1)\n",
      "Requirement already satisfied: tzdata>=2022.1 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from pandas<3,>=1.3.0->streamlit) (2023.3)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from python-dateutil<3,>=2.7.3->streamlit) (1.16.0)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (3.4)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2.0.7)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2024.2.2)\n",
      "Requirement already satisfied: markdown-it-py<3.0.0,>=2.2.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from rich<14,>=10.14.0->streamlit) (2.2.0)\n",
      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from rich<14,>=10.14.0->streamlit) (2.15.1)\n",
      "Requirement already satisfied: decorator>=3.4.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from validators<1,>=0.2->streamlit) (5.1.1)\n",
      "Requirement already satisfied: smmap<5,>=3.0.1 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from jinja2->altair<6,>=4.0->streamlit) (2.1.3)\n",
      "Requirement already satisfied: attrs>=22.2.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.1.0)\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2023.7.1)\n",
      "Requirement already satisfied: referencing>=0.28.4 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.30.2)\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.10.6)\n",
      "Requirement already satisfied: mdurl~=0.1 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from markdown-it-py<3.0.0,>=2.2.0->rich<14,>=10.14.0->streamlit) (0.1.0)\n"
     ]
    }
   ],
   "source": [
    "pip install streamlit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 347,
   "id": "e7f69ae2-e348-44c8-b247-657e33accfcd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: matplotlib in c:\\users\\haril\\anaconda3\\lib\\site-packages (3.8.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from matplotlib) (1.2.0)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from matplotlib) (0.11.0)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from matplotlib) (4.25.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from matplotlib) (1.4.4)\n",
      "Requirement already satisfied: numpy<2,>=1.21 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from matplotlib) (1.26.4)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from matplotlib) (23.1)\n",
      "Requirement already satisfied: pillow>=6.2.0 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from matplotlib) (10.2.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from matplotlib) (3.0.9)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from matplotlib) (2.8.2)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\haril\\anaconda3\\lib\\site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "d908caa8-be39-4afd-8e03-b7706f61e6a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import streamlit as st\n",
    "\n",
    "# Load the dataset\n",
    "def load_data():\n",
    "    # Replace with the path to your movie dataset (e.g., IMDb data)\n",
    "    df = pd.read_csv('master_df.csv')\n",
    "    return df\n",
    "\n",
    "# Process and filter the data\n",
    "def process_data(df):\n",
    "    # Ensure the ratings are numeric and voting counts are integers\n",
    "    df['Rating'] = pd.to_numeric(df['Rating'], errors='coerce')\n",
    "    df['Voting'] = pd.to_numeric(df['Voting'], errors='coerce')\n",
    "    \n",
    "    # Remove any rows with missing ratings or votes\n",
    "    df = df.dropna(subset=['Rating', 'Voting'])\n",
    "    \n",
    "    # Sort by rating and votes\n",
    "    top_movies = df.sort_values(by=['Rating', 'Voting'], ascending=False).head(10)\n",
    "    \n",
    "    return top_movies\n",
    "\n",
    "# Streamlit app interface\n",
    "def main():\n",
    "    st.title(\"Top 10 Movies by Rating and Voting Count\")\n",
    "    \n",
    "    # Load data\n",
    "    df = load_data()\n",
    "    \n",
    "    # Process data to get top 10 movies\n",
    "    top_movies = process_data(df)\n",
    "    \n",
    "    # Display the result\n",
    "    st.write(\"Top 10 Movies:\")\n",
    "    st.dataframe(top_movies[['Title', 'Rating', 'Voting']])\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "bb477bbe-d056-414b-a821-f344486ca1ae",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
